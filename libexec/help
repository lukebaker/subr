#!/usr/bin/env bash
set -e

print_summaries() {
  if [ -n "$1" ]; then
    paths[0]=$1
  else
    paths[0]="$_SUBR_ROOT/libexec"
    if [ ! -z $_SUBR_SUB_PATH ]; then
      paths[1]=$_SUBR_SUB_PATH
    fi
  fi
  for path in "${paths[@]}"; do
    for file in $path/*; do
      if [ ! -h $file -a -e $file ]; then
        local summary=$(grep "^# Summary:" $file | cut -d ' ' -f3-)
        if [ -n "$summary" ]; then
          local name=$(basename $file | sed 's/subr-//')
          echo "$name" | awk '{ printf "   %-20s   ", $1}'
          echo -n $summary
          echo
        fi
      fi
    done
  done
}

print_help() {
  local usage=$(grep "^# Usage:" $1 | cut -d ' ' -f2-)
  local halp="$(awk '/^# Help:/,/^[^#]/' $1 | grep "^#" | sed "s/^# Help: //" | sed "s/^# //" | sed "s/^#//")"

  if [ -n "$usage" ]; then
    echo $usage
    [ -n "$halp" ] && echo && echo "$halp"
  else
    echo "Sorry, this command isn't documented yet."
  fi
}

# Provide subr completions
if [ "$1" = "--complete" ]; then
  shift
  echo "$(subr completions "$@")"
  exit
fi

source "$_SUBR_ROOT/libexec/subr.include"

case "$1" in
"") echo "Usage: subr <command> [<args>]

Some useful subr commands are:
$(print_summaries)

See 'subr help <command>' for information on a specific command."
;;
*)
  get_path_from_command "$@"
  if [ ! -d "$command_path" -a -x "$command_path" ]; then
    print_help "$command_path"
  elif [ -d "$command_path" ]; then
    print_summaries "$command_path"
  else
    echo "subr: no such command \`$@'"
  fi
esac
