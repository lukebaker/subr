#!/usr/bin/env bash
set -e

print_summaries() {
  if [ -n "$1" ]; then
    path=$1
  else
    path="$_SUBR_ROOT/libexec"
  fi
  for file in $path/*; do
    if [ ! -h $file -a -e $file ]; then
      local summary=$(grep "^# Summary:" $file | cut -d ' ' -f3-)
      if [ -n "$summary" ]; then
        local name=$(basename $file | sed 's/subr-//')
        echo "$name" | awk '{ printf "   %-20s   ", $1}'
        echo -n $summary
        echo
      fi
    fi
  done
}

print_help() {
  local usage=$(grep "^# Usage:" $1 | cut -d ' ' -f2-)
  local halp="$(awk '/^# Help:/,/^[^#]/' $1 | grep "^#" | sed "s/^# Help: //" | sed "s/^# //" | sed "s/^#//")"

  if [ -n "$usage" ]; then
    echo $usage
    [ -n "$halp" ] && echo && echo "$halp"
  else
    echo "Sorry, this command isn't documented yet."
  fi
}

# Provide subr completions
if [ "$1" = "--complete" ]; then
  shift
  echo "$(subr completions "$@")"
  exit
fi

case "$1" in
"") echo "Usage: subr <command> [<args>]

Some useful subr commands are:
$(print_summaries)

See 'subr help <command>' for information on a specific command."
;;
*)
  args="$@"
  command="$1"
  command_path="$_SUBR_ROOT/libexec"
  while [ ! -z $command ]; do
    command_path="$command_path/$command"
    if [ ! -d "$command_path" -a -x "$command_path" ]; then
      break
    fi
    shift
    command="$1"
  done
  if [ -d "$command_path" ]; then
    print_summaries "$command_path"
  elif [ -e "$command_path" ]; then
    print_help "$command_path"
  else
    echo "subr: no such command \`$args'"
  fi
esac
